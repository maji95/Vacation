from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import get_session
from models import User, ApprovalFirst, ApprovalSecond, ApprovalFinal, ApprovalDone
import logging

logger = logging.getLogger(__name__)

async def view_pending_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    session = get_session()
    try:
        user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
        
        # –ò—â–µ–º –∑–∞—è–≤–∫–∏ –≥–¥–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–º
        first_level = session.query(ApprovalFirst).filter_by(
            name_approval=user.full_name,
            status='pending'
        ).all()

        second_level = session.query(ApprovalSecond).filter_by(
            name_approval=user.full_name,
            status='pending'
        ).all()

        final_level = session.query(ApprovalFinal).filter_by(
            name_approval=user.full_name,
            status='pending'
        ).all()

        all_requests = first_level + second_level + final_level

        if not all_requests:
            await query.edit_message_text(
                "–ù–µ—Ç –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–∞—à–µ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="show_menu")]])
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ callback
        await query.edit_message_text(
            "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="show_menu")]])
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
        for req in all_requests:
            if isinstance(req, ApprovalFirst):
                level = '–ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å'
                callback_prefix = 'first'
            elif isinstance(req, ApprovalSecond):
                level = '–í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å'
                callback_prefix = 'second'
            else:
                level = '–§–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å'
                callback_prefix = 'final'

            message = (
                f"üìã {level}\n"
                f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {req.name}\n"
                f"–ü–µ—Ä–∏–æ–¥: {req.start_date.strftime('%d.%m.%Y')} - {req.end_date.strftime('%d.%m.%Y')}\n"
                f"–î–Ω–µ–π: {int(req.days)}"
            )

            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{callback_prefix}_{req.id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{callback_prefix}_{req.id}")
                ]
            ]

            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

    except Exception as e:
        logger.error(f"Error in view_pending_requests: {e}")
        await query.edit_message_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="show_menu")]])
        )
    finally:
        session.close()
