from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import get_session
from models import User, HoursRequest, ApprovalProcess, ApprovalFirstHour, ApprovalSecondHour, ApprovalFinalHour, ApprovalDoneHour
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def create_hours_approval_request(hours_request_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ"""
    session = get_session()
    try:
        hours_request = session.query(HoursRequest).get(hours_request_id)
        employee = session.query(User).get(hours_request.user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        logger.info("Raw database values:")
        result = session.execute("SELECT employee_name FROM approval_process WHERE employee_name = :name", 
                               {"name": employee.full_name})
        for row in result:
            logger.info(f"Direct from DB: '{row[0]}'")
            
        employee_name = employee.full_name.strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        logger.info(f"Searching approval process for employee: '{employee_name}'")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã
        result = session.execute(
            "SELECT id FROM approval_process WHERE BINARY employee_name = BINARY :name",
            {"name": employee_name}
        ).first()
        
        if result:
            approval_process_id = result[0]
            approval_process = session.query(ApprovalProcess).get(approval_process_id)
            logger.info(f"Found approval process by direct query for: {approval_process.employee_name}")
        else:
            logger.error(f"Approval process not found for employee: '{employee_name}'")
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            all_processes = session.execute("SELECT employee_name FROM approval_process").fetchall()
            logger.info("All employee names in approval_process:")
            for proc in all_processes:
                logger.info(f"Name in DB: '{proc[0]}'")
            return False
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ø–æ—á–∫—É —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        chain = []
        if approval_process.first_approval:
            chain.append('first')
        if approval_process.second_approval:
            chain.append('second')
        if approval_process.final_approval:
            chain.append('final')
        
        logger.info(f"Approval chain: {chain}")
        
        if not chain:
            logger.error("No approval chain defined")
            return False

        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ü–µ–ø–æ—á–∫–µ
        first_level = chain[0]
        approval_classes = {
            'first': ApprovalFirstHour,
            'second': ApprovalSecondHour,
            'final': ApprovalFinalHour
        }
        
        try:
            logger.info(f"Creating {first_level} approval record")
            logger.info(f"Approval data: name={employee_name}, approver={getattr(approval_process, f'{first_level}_approval')}")
            logger.info(f"Request data: date={hours_request.date_absence}, start={hours_request.start_hour}, end={hours_request.end_hour}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
            existing = session.query(approval_classes[first_level]).filter_by(
                name=employee_name,
                date_absence=hours_request.date_absence
            ).first()
            
            if existing:
                logger.info(f"Found existing approval record: {existing.id}")
                return True
                
            new_approval = approval_classes[first_level](
                name=employee_name,
                name_approval=getattr(approval_process, f'{first_level}_approval'),
                date_absence=hours_request.date_absence,
                start_hour=hours_request.start_hour,
                end_hour=hours_request.end_hour,
                status='pending'
            )
            
            session.add(new_approval)
            session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –¥–æ –∫–æ–º–º–∏—Ç–∞
            logger.info(f"Created approval record with ID: {new_approval.id}")
            session.commit()
            logger.info(f"Successfully created {first_level} approval record")
            return True
            
        except Exception as e:
            logger.error(f"Error creating approval record: {e}")
            session.rollback()
            return False
    except Exception as e:
        logger.error(f"Error creating hours approval request: {e}")
        return False
    finally:
        session.close()

async def send_hours_approval_request(update: Update, context: ContextTypes.DEFAULT_TYPE, hours_request_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è"""
    try:
        session = get_session()
        hours_request = session.query(HoursRequest).get(hours_request_id)
        if not hours_request:
            logger.error(f"Hours request not found: {hours_request_id}")
            return False
            
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å –æ–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        approvals = {
            'first': ApprovalFirstHour,
            'second': ApprovalSecondHour,
            'final': ApprovalFinalHour
        }
        
        current_approval = None
        for level, model in approvals.items():
            approval = session.query(model).filter_by(
                name=hours_request.user.full_name,
                date_absence=hours_request.date_absence,
                status='pending'
            ).first()
            if approval:
                current_approval = approval
                current_level = level
                break
                
        if not current_approval:
            logger.error("No pending approval found")
            return False
            
        logger.info(f"Found current approval: {current_level}, approver: {current_approval.name_approval}")
        
        # –ü–æ–ª—É—á–∞–µ–º telegram_id —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ
        approver = session.query(User).filter_by(full_name=current_approval.name_approval).first()
        if not approver:
            logger.error(f"Approver not found: {current_approval.name_approval}")
            return False
            
        logger.info(f"Found approver: {approver.full_name} (ID: {approver.telegram_id})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–º—É
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_absence_{current_level}_{hours_request.id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_absence_{current_level}_{hours_request.id}")
            ]
        ]
        
        await context.bot.send_message(
            chat_id=approver.telegram_id,
            text=(
                f"üìã –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ\n"
                f"–û—Ç: {hours_request.user.full_name}\n"
                f"–î–∞—Ç–∞: {hours_request.date_absence.strftime('%d.%m.%Y')}\n"
                f"–í—Ä–µ–º—è: {hours_request.start_hour} - {hours_request.end_hour}"
            ),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return True

    except Exception as e:
        logger.error(f"Error sending hours approval request: {e}")
        return False
    finally:
        session.close()

async def handle_hours_approval(update: Update, context: ContextTypes.DEFAULT_TYPE, request_id: int, level: str, is_approved: bool):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ"""
    query = update.callback_query
    await query.answer()
    
    session = get_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ
        hours_request = session.query(HoursRequest).get(request_id)
        if not hours_request:
            logger.error(f"Hours request not found: {request_id}")
            await query.edit_message_text("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employee = session.query(User).get(hours_request.user_id)
        if not employee:
            logger.error("Employee not found")
            await query.edit_message_text("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        approval_process = session.query(ApprovalProcess).filter_by(
            employee_name=employee.full_name
        ).first()
        
        if not approval_process:
            logger.error(f"Approval process not found for employee: {employee.full_name}")
            await query.edit_message_text("‚ùå –ü—Ä–æ—Ü–µ—Å—Å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        approval_classes = {
            'first': ApprovalFirstHour,
            'second': ApprovalSecondHour,
            'final': ApprovalFinalHour
        }
        
        next_levels = {
            'first': 'second',
            'second': 'final',
            'final': None
        }
        
        level_names = {
            'first': '–ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å',
            'second': '–í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å',
            'final': '–§–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å'
        }
        
        current_approval = session.query(approval_classes[level]).filter_by(
            name=employee.full_name,
            date_absence=hours_request.date_absence,
            status='pending'
        ).first()
        
        if not current_approval:
            logger.error(f"Current approval record not found for level {level}")
            await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å –æ–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        current_approval.status = 'approved' if is_approved else 'rejected'
        current_approval.updated_at = datetime.utcnow()
        session.commit()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ approval_done_hour
        try:
            done_record = ApprovalDoneHour(
                id=request_id,
                name=employee.full_name,
                name_approval=update.effective_user.full_name,
                level=level,
                status='approved' if is_approved else 'rejected',
                date=datetime.utcnow(),
                date_absence=hours_request.date_absence,
                start_time=hours_request.start_hour,
                end_time=hours_request.end_hour,
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow()
            )
            session.add(done_record)
            session.commit()
            logger.info(f"Created approval_done_hour record for request {request_id}")
        except Exception as e:
            logger.error(f"Error creating approval_done_hour record: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
        
        if is_approved:
            next_level = next_levels[level]
            if next_level:
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ
                next_approver_name = getattr(approval_process, f'{next_level}_approval')
                if next_approver_name:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
                    next_approval = approval_classes[next_level](
                        name=employee.full_name,
                        name_approval=next_approver_name,
                        date_absence=hours_request.date_absence,
                        start_hour=hours_request.start_hour,
                        end_hour=hours_request.end_hour,
                        status='pending'
                    )
                    session.add(next_approval)
                    session.commit()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–º—É
                    next_approver = session.query(User).filter_by(full_name=next_approver_name).first()
                    if next_approver and next_approver.telegram_id:
                        keyboard = [
                            [
                                InlineKeyboardButton("‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_absence_{next_level}_{request_id}"),
                                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_absence_{next_level}_{request_id}")
                            ]
                        ]
                        await context.bot.send_message(
                            chat_id=next_approver.telegram_id,
                            text=(
                                f"üìã –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ ({level_names[next_level]})\n\n"
                                f"–û—Ç: {employee.full_name}\n"
                                f"–î–∞—Ç–∞: {hours_request.date_absence.strftime('%d.%m.%Y')}\n"
                                f"–í—Ä–µ–º—è: {hours_request.start_hour} - {hours_request.end_hour}\n\n"
                                f"‚úÖ –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {update.effective_user.full_name}"
                            ),
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )
            else:
                # –≠—Ç–æ –±—ã–ª–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                hours_request.status = 'approved'
                hours_request.updated_at = datetime.utcnow()
                session.commit()
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                await context.bot.send_message(
                    chat_id=employee.telegram_id,
                    text=(
                        "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
                        f"–î–∞—Ç–∞: {hours_request.date_absence.strftime('%d.%m.%Y')}\n"
                        f"–í—Ä–µ–º—è: {hours_request.start_hour} - {hours_request.end_hour}\n\n"
                        f"–£—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ:\n"
                        f"1. {approval_process.first_approval}\n"
                        + (f"2. {approval_process.second_approval}\n" if approval_process.second_approval else "")
                        + (f"3. {approval_process.final_approval}" if approval_process.final_approval else "")
                    )
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º HR
                hr_users = session.query(User).filter_by(is_hr=True).all()
                for hr_user in hr_users:
                    if hr_user.telegram_id:
                        await context.bot.send_message(
                            chat_id=hr_user.telegram_id,
                            text=(
                                "‚úÖ –ù–æ–≤—ã–π —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ\n\n"
                                f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee.full_name}\n"
                                f"–î–∞—Ç–∞: {hours_request.date_absence.strftime('%d.%m.%Y')}\n"
                                f"–í—Ä–µ–º—è: {hours_request.start_hour} - {hours_request.end_hour}\n\n"
                                f"–£—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ:\n"
                                f"1. {approval_process.first_approval}\n"
                                + (f"2. {approval_process.second_approval}\n" if approval_process.second_approval else "")
                                + (f"3. {approval_process.final_approval}" if approval_process.final_approval else "")
                            )
                        )
        else:
            # –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω
            hours_request.status = 'rejected'
            hours_request.updated_at = datetime.utcnow()
            session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            await context.bot.send_message(
                chat_id=employee.telegram_id,
                text=(
                    "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n"
                    f"–î–∞—Ç–∞: {hours_request.date_absence.strftime('%d.%m.%Y')}\n"
                    f"–í—Ä–µ–º—è: {hours_request.start_hour} - {hours_request.end_hour}\n\n"
                    f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {update.effective_user.full_name} ({level_names[level]})"
                )
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ
        status_text = "—É—Ç–≤–µ—Ä–∂–¥–µ–Ω" if is_approved else "–æ—Ç–∫–ª–æ–Ω–µ–Ω"
        level_text = level_names[level].lower()
        await query.edit_message_text(
            f"‚úÖ –ó–∞–ø—Ä–æ—Å {status_text} ({level_text})",
            reply_markup=None
        )
        
        return True
        
    except Exception as e:
        logger.error(f"Error handling approval: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        return False
    finally:
        session.close()

__all__ = ['create_hours_approval_request', 'send_hours_approval_request', 'handle_hours_approval']
