from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import get_session
from models import User, ApprovalFirst, ApprovalSecond, ApprovalFinal, ApprovalDone, ApprovalProcess
from ..admin.system_monitor import SystemMonitor
from datetime import datetime, date
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def calculate_vacation_days(start_date: date, end_date: date) -> int:
    """–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞"""
    return (end_date - start_date).days + 1

async def send_next_approval_notification(context: ContextTypes.DEFAULT_TYPE, new_approval, next_level: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–º—É"""
    session = get_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ
        approver = session.query(User).filter_by(full_name=new_approval.name_approval).first()
        if not approver:
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        level_names = {
            'first': '–ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ',
            'second': '–≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ',
            'final': '—Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ'
        }
        level_name = level_names.get(next_level, '')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üìã –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ {level_name} —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n"
            f"–û—Ç: {new_approval.name}\n"
            f"–ü–µ—Ä–∏–æ–¥: {new_approval.start_date.strftime('%d.%m.%Y')} - {new_approval.end_date.strftime('%d.%m.%Y')}\n"
            f"–î–Ω–µ–π: {int(new_approval.days)}"
        )

        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{next_level}_{new_approval.id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{next_level}_{new_approval.id}")
            ]
        ]

        await context.bot.send_message(
            chat_id=approver.telegram_id,
            text=message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"Error sending next approval notification: {e}")
    finally:
        session.close()

async def notify_user(context: ContextTypes.DEFAULT_TYPE, approval_entry, is_approved: bool, is_final: bool = False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –æ —Ä–µ—à–µ–Ω–∏–∏ –ø–æ –µ–≥–æ –∑–∞–ø—Ä–æ—Å—É"""
    session = get_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employee = session.query(User).filter_by(full_name=approval_entry.name).first()
        if not employee:
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not is_approved or is_final:
            status = "–æ–¥–æ–±—Ä–µ–Ω" if is_approved else "–æ—Ç–∫–ª–æ–Ω–µ–Ω"
            message = (
                f"–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—É—Å–∫ —Å {approval_entry.start_date.strftime('%d.%m.%Y')} "
                f"–ø–æ {approval_entry.end_date.strftime('%d.%m.%Y')} –±—ã–ª {status}."
            )

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await SystemMonitor.log_action(
                context,
                "approval_result",
                employee.telegram_id,
                f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—É—Å–∫ {status} (final={is_final})"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=employee.telegram_id,
                text=message
            )
    except Exception as e:
        logger.error(f"Error notifying user: {e}")
    finally:
        session.close()

async def notify_hr(context: ContextTypes.DEFAULT_TYPE, approval_entry):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ HR –æ —Ñ–∏–Ω–∞–ª—å–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–º –æ—Ç–ø—É—Å–∫–µ"""
    session = get_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö HR
        hr_users = session.query(User).filter_by(is_hr=True).all()
        if not hr_users:
            return

        message = (
            f"‚ú® –ù–æ–≤—ã–π —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –æ—Ç–ø—É—Å–∫\n\n"
            f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {approval_entry.name}\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {approval_entry.start_date.strftime('%d.%m.%Y')} - {approval_entry.end_date.strftime('%d.%m.%Y')}\n"
            f"üìä –î–Ω–µ–π: {int(approval_entry.days)}\n"
            f"‚è∞ –î–∞—Ç–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {approval_entry.date.strftime('%d.%m.%Y %H:%M')}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É HR
        for hr in hr_users:
            try:
                await context.bot.send_message(
                    chat_id=hr.telegram_id,
                    text=message
                )
            except Exception as e:
                logger.error(f"Error sending HR notification to {hr.full_name}: {e}")

    except Exception as e:
        logger.error(f"Error in notify_hr: {e}")
    finally:
        session.close()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
__all__ = ['calculate_vacation_days', 'send_next_approval_notification', 'notify_user', 'notify_hr']
