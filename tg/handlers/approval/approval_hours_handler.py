from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import get_session
from models import User, HoursRequest, ApprovalProcessHour, ApprovalDoneHour
from .approval_hours_utils import get_local_time, get_approval_chain, logger
from ..admin.system_monitor import SystemMonitor

async def send_next_approval_notification(context: ContextTypes.DEFAULT_TYPE, hours_request, next_level: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–º—É"""
    session = get_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        approval_process = session.query(ApprovalProcessHour).filter_by(
            employee_name=hours_request.user.full_name
        ).first()
        if not approval_process:
            logger.error(f"Approval process not found for: {hours_request.user.full_name}")
            return False

        # –ü–æ–ª—É—á–∞–µ–º —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        approver_field = f"{next_level}_approval"
        approver_name = getattr(approval_process, approver_field)
        approver = session.query(User).filter_by(full_name=approver_name).first()
        
        if not approver:
            logger.error(f"Next approver not found: {approver_name}")
            return False

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        level_names = {
            'first': '–ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ',
            'second': '–≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ',
            'final': '—Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ'
        }
        level_name = level_names.get(next_level, '')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üìã –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ {level_name} —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–≥—É–ª–∞\n"
            f"–û—Ç: {hours_request.user.full_name}\n"
            f"–î–∞—Ç–∞: {hours_request.date_absence.strftime('%d.%m.%Y')}\n"
            f"–í—Ä–µ–º—è: {hours_request.start_hour} - {hours_request.end_hour}"
        )

        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                    callback_data=f"approve_hours_{hours_request.id}_{next_level}"
                ),
                InlineKeyboardButton(
                    "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"reject_hours_{hours_request.id}_{next_level}"
                )
            ]
        ]

        await context.bot.send_message(
            chat_id=approver.telegram_id,
            text=message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return True

    except Exception as e:
        logger.error(f"Error sending next approval notification: {e}")
        return False
    finally:
        session.close()

async def notify_user(context: ContextTypes.DEFAULT_TYPE, hours_request, is_approved: bool, is_final: bool = False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –æ —Ä–µ—à–µ–Ω–∏–∏ –ø–æ –µ–≥–æ –∑–∞–ø—Ä–æ—Å—É"""
    session = get_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employee = session.query(User).filter_by(id=hours_request.user_id).first()
        if not employee:
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not is_approved or is_final:
            status = "–æ–¥–æ–±—Ä–µ–Ω" if is_approved else "–æ—Ç–∫–ª–æ–Ω–µ–Ω"
            message = (
                f"–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–≥—É–ª {hours_request.date_absence.strftime('%d.%m.%Y')} "
                f"—Å {hours_request.start_hour} –¥–æ {hours_request.end_hour} –±—ã–ª {status}."
            )

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await SystemMonitor.log_action(
                context,
                "approval_result",
                employee.telegram_id,
                f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–≥—É–ª {status} (final={is_final})"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=employee.telegram_id,
                text=message
            )

    except Exception as e:
        logger.error(f"Error notifying user: {e}")
    finally:
        session.close()

async def notify_hr(context: ContextTypes.DEFAULT_TYPE, hours_request):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ HR –æ —Ñ–∏–Ω–∞–ª—å–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–º –æ—Ç–≥—É–ª–µ"""
    session = get_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö HR
        hr_users = session.query(User).filter_by(is_hr=True).all()
        if not hr_users:
            return

        message = (
            f"‚ú® –ù–æ–≤—ã–π —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –æ—Ç–≥—É–ª\n\n"
            f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {hours_request.user.full_name}\n"
            f"üìÖ –î–∞—Ç–∞: {hours_request.date_absence.strftime('%d.%m.%Y')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {hours_request.start_hour} - {hours_request.end_hour}\n"
            f"üìù –î–∞—Ç–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {get_local_time().strftime('%d.%m.%Y %H:%M')}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É HR
        for hr in hr_users:
            try:
                await context.bot.send_message(
                    chat_id=hr.telegram_id,
                    text=message
                )
            except Exception as e:
                logger.error(f"Error sending HR notification to {hr.full_name}: {e}")

    except Exception as e:
        logger.error(f"Error in notify_hr: {e}")
    finally:
        session.close()

async def handle_hours_approval(update: Update, context: ContextTypes.DEFAULT_TYPE, request_id: int, level: str, is_approved: bool):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–≥—É–ª"""
    query = update.callback_query
    await query.answer()
    
    session = get_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–≥—É–ª
        hours_request = session.query(HoursRequest).filter_by(id=request_id).first()
        if not hours_request:
            logger.error(f"Hours request not found: {request_id}")
            await query.edit_message_text("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
        if hours_request.status != 'pending':
            await query.edit_message_text("‚ùå –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return False

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        approval_process = session.query(ApprovalProcessHour).filter_by(
            employee_name=hours_request.user.full_name
        ).first()
        if not approval_process:
            logger.error(f"Approval process not found for: {hours_request.user.full_name}")
            await query.edit_message_text("‚ùå –ü—Ä–æ—Ü–µ—Å—Å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ
        approver = session.query(User).filter_by(telegram_id=query.from_user.id).first()
        if not approver:
            await query.edit_message_text("‚ùå –£—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å
        expected_approver = getattr(approval_process, f"{level}_approval")
        if approver.full_name != expected_approver:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
            return False

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ø–æ—á–∫—É —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        approval_chain = get_approval_chain(hours_request.user.full_name)
        current_level_index = approval_chain.index(level)
        is_final = current_level_index == len(approval_chain) - 1

        if not is_approved:
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω
            hours_request.status = 'rejected'
            hours_request.updated_at = get_local_time()
            session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            await notify_user(context, hours_request, False, False)
            await query.edit_message_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            return True

        if is_final:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            try:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
                approval_done = ApprovalDoneHour(
                    name=hours_request.user.full_name,
                    name_approval=approver.full_name,
                    date_absence=hours_request.date_absence,
                    start_hour=hours_request.start_hour,
                    end_hour=hours_request.end_hour,
                    date=get_local_time()
                )
                session.add(approval_done)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
                hours_request.status = 'approved'
                hours_request.updated_at = get_local_time()
                session.commit()

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö
                await notify_user(context, hours_request, True, True)
                await notify_hr(context, hours_request)
                await query.edit_message_text("‚úÖ –ó–∞–ø—Ä–æ—Å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω")
                return True

            except Exception as e:
                logger.error(f"Error creating final approval record: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏")
                return False
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            next_level = approval_chain[current_level_index + 1]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–º—É
            if await send_next_approval_notification(context, hours_request, next_level):
                await query.edit_message_text("‚úÖ –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                return True
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                return False

    except Exception as e:
        logger.error(f"Error handling hours approval: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        return False
    finally:
        session.close()

__all__ = ['handle_hours_approval']
