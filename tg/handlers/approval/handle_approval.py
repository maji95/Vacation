from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import get_session
from models import User, ApprovalFirst, ApprovalSecond, ApprovalFinal, ApprovalDone, ApprovalProcess
from datetime import datetime, timezone, timedelta
import logging
from .approval_handler import calculate_vacation_days, send_next_approval_notification
from .approval_utils import check_approval_permissions, notify_hr_managers, notify_employee_approval

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def get_local_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC+2"""
    return datetime.now(timezone.utc).astimezone(timezone(timedelta(hours=2)))

async def handle_approval(update: Update, context: ContextTypes.DEFAULT_TYPE, approval_id: int, level: str, is_approved: bool):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ"""
    query = update.callback_query
    await query.answer()

    session = get_session()
    try:
        logger.info(f"Starting approval handling - ID: {approval_id}, Level: {level}, Approved: {is_approved}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        approval_class = {
            'first': ApprovalFirst,
            'second': ApprovalSecond,
            'final': ApprovalFinal
        }[level]
        
        approval_entry = session.query(approval_class).get(approval_id)
        if not approval_entry:
            logger.error(f"Approval entry not found - ID: {approval_id}, Level: {level}")
            await query.edit_message_text("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
            return

        logger.info(f"Found approval entry - Name: {approval_entry.name}, Approver: {approval_entry.name_approval}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞
        user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
        if not user or user.full_name != approval_entry.name_approval:
            logger.error(f"Permission denied - User: {user.full_name if user else 'None'}, Expected: {approval_entry.name_approval}")
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        approval_entry.status = 'approved' if is_approved else 'rejected'
        approval_entry.date = get_local_time()

        if is_approved:
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ø–æ—á–∫—É —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            approval_process = session.query(ApprovalProcess).filter_by(
                employee_name=approval_entry.name
            ).first()
            
            if not approval_process:
                logger.error(f"ApprovalProcess not found for employee: {approval_entry.name}")
            else:
                logger.info(f"Found ApprovalProcess - First: {approval_process.first_approval}, "
                          f"Second: {approval_process.second_approval}, Final: {approval_process.final_approval}")

            chain = []
            if approval_process and approval_process.first_approval:
                chain.append('first')
            if approval_process and approval_process.second_approval:
                chain.append('second')
            if approval_process and approval_process.final_approval:
                chain.append('final')

            logger.info(f"Approval chain: {chain}")
            
            current_index = chain.index(level)
            next_level = chain[current_index + 1] if current_index + 1 < len(chain) else None

            logger.info(f"Current index: {current_index}, Next level: {next_level}")

            if next_level:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
                next_approval_class = {
                    'first': ApprovalFirst,
                    'second': ApprovalSecond,
                    'final': ApprovalFinal
                }[next_level]

                new_approval = next_approval_class(
                    name=approval_entry.name,
                    name_approval=getattr(approval_process, f'{next_level}_approval'),
                    days=calculate_vacation_days(approval_entry.start_date, approval_entry.end_date),
                    start_date=approval_entry.start_date,
                    end_date=approval_entry.end_date
                )
                session.add(new_approval)
                session.commit()
                logger.info(f"Created next level approval - Level: {next_level}, ID: {new_approval.id}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–º—É
                await send_next_approval_notification(context, new_approval, next_level)

            else:
                # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ approval_done
                done_approval = ApprovalDone(
                    name=approval_entry.name,
                    name_approval=approval_entry.name_approval,
                    days=calculate_vacation_days(approval_entry.start_date, approval_entry.end_date),
                    start_date=approval_entry.start_date,
                    end_date=approval_entry.end_date,
                    status='approved'
                )
                session.add(done_approval)
                session.commit()
                logger.info(f"Created done approval - ID: {done_approval.id}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ HR
                await notify_hr_managers(context, approval_entry)

        session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        is_final = level == 'final' or not is_approved
        if is_final:
            logger.info(f"Sending notification to employee - Final: {is_final}, Approved: {is_approved}")
            await notify_employee_approval(context, approval_entry, is_approved)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        level_names = {
            'first': '–ü–µ—Ä–≤–∏—á–Ω–æ–µ',
            'second': '–í—Ç–æ—Ä–∏—á–Ω–æ–µ',
            'final': '–§–∏–Ω–∞–ª—å–Ω–æ–µ'
        }
        level_name = level_names.get(level, '')
        status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞" if is_approved else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        
        message = (
            f"{status}\n\n"
            f"üìã {level_name} —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n"
            f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {approval_entry.name}\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {approval_entry.start_date.strftime('%d.%m.%Y')} - {approval_entry.end_date.strftime('%d.%m.%Y')}\n"
            f"üìä –î–Ω–µ–π: {int(approval_entry.days)}\n"
            f"‚è∞ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {approval_entry.date.strftime('%d.%m.%Y %H:%M')}"
        )

        if is_approved and next_level:
            message += f"\n\n‚ÜóÔ∏è –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞ {level_names.get(next_level, '').lower()} —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"
        elif is_approved and not next_level:
            message += "\n\n‚ú® –ó–∞—è–≤–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
        
        await query.edit_message_text(message)

    except Exception as e:
        logger.error(f"Error handling approval: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        session.rollback()
    finally:
        session.close()
