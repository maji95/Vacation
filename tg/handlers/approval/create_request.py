from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import get_session
from models import User, VacationRequest, ApprovalProcess, ApprovalFirst, ApprovalSecond, ApprovalFinal
from datetime import datetime
import logging
from .approval_handler import calculate_vacation_days

logger = logging.getLogger(__name__)

async def create_approval_request(vacation_request_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ"""
    session = get_session()
    try:
        vacation_request = session.query(VacationRequest).get(vacation_request_id)
        employee = session.query(User).get(vacation_request.user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        approval_process = session.query(ApprovalProcess).filter_by(
            employee_name=employee.full_name
        ).first()

        if approval_process:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ø–æ—á–∫—É —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            chain = []
            if approval_process.first_approval:
                chain.append('first')
            if approval_process.second_approval:
                chain.append('second')
            if approval_process.final_approval:
                chain.append('final')
            
            if not chain:
                return False

            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ü–µ–ø–æ—á–∫–µ
            first_level = chain[0]
            new_approval = {
                'first': ApprovalFirst,
                'second': ApprovalSecond,
                'final': ApprovalFinal
            }[first_level](
                name=employee.full_name,
                name_approval=getattr(approval_process, f'{first_level}_approval'),
                days=calculate_vacation_days(vacation_request.start_date, vacation_request.end_date),
                start_date=vacation_request.start_date,
                end_date=vacation_request.end_date
            )
            
            session.add(new_approval)
            session.commit()
            return True
        return False
    except Exception as e:
        logger.error(f"Error creating approval request: {e}")
        return False
    finally:
        session.close()

async def send_approval_request(update: Update, context: ContextTypes.DEFAULT_TYPE, vacation_request_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    session = get_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—É—Å–∫
        vacation_request = session.query(VacationRequest).get(vacation_request_id)
        if not vacation_request:
            return False

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employee = session.query(User).get(vacation_request.user_id)
        if not employee:
            return False

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        approval_process = session.query(ApprovalProcess).filter_by(
            employee_name=employee.full_name
        ).first()

        if not approval_process:
            return False

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ
        approver_name = None
        if approval_process.first_approval:
            approver_name = approval_process.first_approval
        elif approval_process.final_approval:
            approver_name = approval_process.final_approval

        if not approver_name:
            return False

        # –ü–æ–ª—É—á–∞–µ–º —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ
        approver = session.query(User).filter_by(full_name=approver_name).first()
        if not approver:
            return False

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        approval_class = ApprovalFirst if approval_process.first_approval else ApprovalFinal
        approval_entry = session.query(approval_class).filter_by(
            name=employee.full_name,
            status='pending'
        ).first()

        if not approval_entry:
            return False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–º—É
        level = 'first' if approval_process.first_approval else 'final'
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{level}_{approval_entry.id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{level}_{approval_entry.id}")
            ]
        ]
        text = (
            f"üìã –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—É—Å–∫\n"
            f"–û—Ç: {employee.full_name}\n"
            f"–ü–µ—Ä–∏–æ–¥: {vacation_request.start_date.strftime('%d.%m.%Y')} - {vacation_request.end_date.strftime('%d.%m.%Y')}\n"
            f"–î–Ω–µ–π: {int(calculate_vacation_days(vacation_request.start_date, vacation_request.end_date))}"
        )
        
        await context.bot.send_message(
            chat_id=approver.telegram_id,
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return True

    except Exception as e:
        logger.error(f"Error sending approval request: {e}")
        return False
    finally:
        session.close()

__all__ = ['create_approval_request', 'send_approval_request']
