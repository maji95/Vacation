from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from config import get_session
from models import User, VacationRequest
from ..approval.create_request import create_approval_request, send_approval_request
import logging
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

def calculate_vacation_days(start_date: datetime, end_date: datetime) -> int:
    """–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞"""
    days = (end_date - start_date).days + 1
    return int(days)

def create_back_button() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥"""
    keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    return InlineKeyboardMarkup(keyboard)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—É—Å–∫–æ–≤"""
    logger.info("Executing handle_message function")
    
    vacation_state = context.user_data.get('vacation_state')
    if not vacation_state:
        return

    session = get_session()
    try:
        user = session.query(User).filter_by(telegram_id=update.message.from_user.id).first()
        if not user:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if vacation_state == 'waiting_start_date':
            try:
                start_date = datetime.strptime(update.message.text.strip(), "%d.%m.%Y")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
                if start_date.date() < datetime.now().date():
                    keyboard = create_back_button()
                    await update.message.reply_text(
                        "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–Ω–æ–≤–∞.",
                        reply_markup=keyboard
                    )
                    return

                context.user_data['start_date'] = start_date
                context.user_data['vacation_state'] = 'waiting_end_date'
                
                keyboard = create_back_button()
                await update.message.reply_text(
                    "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
                    reply_markup=keyboard
                )
            except ValueError:
                keyboard = create_back_button()
                await update.message.reply_text(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì",
                    reply_markup=keyboard
                )

        elif vacation_state == 'waiting_end_date':
            try:
                end_date = datetime.strptime(update.message.text.strip(), "%d.%m.%Y")
                start_date = context.user_data.get('start_date')
                
                if end_date < start_date:
                    keyboard = create_back_button()
                    await update.message.reply_text(
                        "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–Ω–æ–≤–∞.",
                        reply_markup=keyboard
                    )
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
                vacation_days = calculate_vacation_days(start_date, end_date)
                if vacation_days > user.vacation_days:
                    keyboard = create_back_button()
                    await update.message.reply_text(
                        f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞. –î–æ—Å—Ç—É–ø–Ω–æ: {int(user.vacation_days)} –¥–Ω–µ–π.\n"
                        f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ: {vacation_days} –¥–Ω–µ–π.\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –¥–∞—Ç—ã.",
                        reply_markup=keyboard
                    )
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                context.user_data['end_date'] = end_date
                context.user_data['vacation_days'] = vacation_days
                context.user_data['vacation_state'] = 'waiting_confirmation'

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_vacation")],
                    [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã", callback_data="restart_vacation_request")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_to_menu")]
                ]
                await update.message.reply_text(
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—É—Å–∫:\n\n"
                    f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date.strftime('%d.%m.%Y')}\n"
                    f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date.strftime('%d.%m.%Y')}\n"
                    f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {vacation_days}\n"
                    f"üí° –î–æ—Å—Ç—É–ø–Ω–æ –¥–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞: {int(user.vacation_days)}\n\n"
                    f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except ValueError:
                keyboard = create_back_button()
                await update.message.reply_text(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì",
                    reply_markup=keyboard
                )

    except Exception as e:
        logger.error(f"Error in handle_message: {e}")
        keyboard = [[InlineKeyboardButton("¬´ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_menu")]]
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data.clear()
    finally:
        session.close()
        logger.info("handle_message function completed")
