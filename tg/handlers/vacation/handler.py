from ..core.base_handler import BaseRequestHandler
from ..core.request_types import RequestType
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import get_session
from models import User, VacationRequest
from ..admin.system_monitor import SystemMonitor
from ..approval.create_request import create_approval_request, send_approval_request
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class VacationHandler(BaseRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Ç–ø—É—Å–∫"""
    
    def __init__(self, request_type: RequestType):
        super().__init__(request_type)
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE, **kwargs):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–ø—É—Å–∫–∞"""
        query = update.callback_query
        await query.answer()

        try:
            user = self.session.query(User).filter_by(telegram_id=query.from_user.id).first()
            if not user:
                await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–ø—É—Å–∫–∞
            await SystemMonitor.log_action(
                context,
                "vacation_start",
                user.telegram_id,
                f"–ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–ø—É—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.full_name}"
            )

            keyboard = [
                [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–ø—É—Å–∫", callback_data="vacation_by_days")],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="show_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üí° –£ –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ {int(user.vacation_days)} –¥–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—É—Å–∫–∞:",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"Error in vacation_start: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    
    async def process(self, update: Update, context: ContextTypes.DEFAULT_TYPE, **kwargs):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç –æ—Ç–ø—É—Å–∫–∞"""
        logger.info("Executing vacation_process function")
        query = update.callback_query
        await query.answer()

        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="vacation_request")]]
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data['vacation_state'] = 'waiting_start_date'
    
    async def confirm(self, update: Update, context: ContextTypes.DEFAULT_TYPE, **kwargs):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—É—Å–∫"""
        query = update.callback_query
        await query.answer()

        try:
            user = self.session.query(User).filter_by(telegram_id=query.from_user.id).first()
            if not user:
                await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            start_date = context.user_data.get('start_date')
            end_date = context.user_data.get('end_date')
            vacation_days = context.user_data.get('vacation_days')

            if not all([start_date, end_date, vacation_days]):
                await query.edit_message_text(
                    "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç–ø—É—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("¬´ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_menu")
                    ]])
                )
                return

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            vacation_request = VacationRequest(
                user_id=user.id,
                start_date=start_date,
                end_date=end_date,
                status='pending'
            )
            self.session.add(vacation_request)
            self.session.commit()
            logger.info(f"–°–æ–∑–¥–∞–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—É—Å–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name} (ID: {user.id})")

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            success = await create_approval_request(vacation_request.id)
            if success:
                await send_approval_request(update, context, vacation_request.id)
                await query.edit_message_text(
                    f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—É—Å–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ:\n\n"
                    f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n"
                    f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {vacation_days}\n\n"
                    f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("¬´ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_menu")
                    ]])
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                self.session.delete(vacation_request)
                self.session.commit()
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—É—Å–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("¬´ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_menu")
                    ]])
                )

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.user_data.clear()

        except Exception as e:
            logger.error(f"Error in confirm_vacation: {e}")
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_menu")
                ]])
            )
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE, **kwargs):
        """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—É—Å–∫"""
        query = update.callback_query
        await query.answer()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –æ—Ç–ø—É—Å–∫–∞
        await self.start(update, context, **kwargs)
