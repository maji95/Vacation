from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import get_session
from models import User, VacationRequest
from ..admin.system_monitor import SystemMonitor
from ..approval.create_request import create_approval_request, send_approval_request
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

async def vacation_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–ø—É—Å–∫–∞"""
    query = update.callback_query
    await query.answer()

    session = get_session()
    try:
        user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
        if not user:
            await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–ø—É—Å–∫–∞
        await SystemMonitor.log_action(
            context,
            "vacation_start",
            user.telegram_id,
            f"–ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–ø—É—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.full_name}"
        )

        keyboard = [
            [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–ø—É—Å–∫", callback_data="vacation_by_days")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="show_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üí° –£ –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ {int(user.vacation_days)} –¥–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—É—Å–∫–∞:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error in vacation_request: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    finally:
        session.close()

async def vacation_by_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—É—Å–∫–∞ –ø–æ –¥–Ω—è–º"""
    logger.info("Executing vacation_by_days function")
    query = update.callback_query
    await query.answer()

    keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="vacation_request")]]
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data['vacation_state'] = 'waiting_start_date'

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –æ—Ç–ø—É—Å–∫–∞
    await vacation_request(update, context)

async def restart_vacation_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–ø—É—Å–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∑–∞–ø—Ä–æ—Å—É –æ—Ç–ø—É—Å–∫–∞ –ø–æ –¥–Ω—è–º
    await vacation_by_days(update, context)

async def confirm_vacation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—É—Å–∫"""
    query = update.callback_query
    await query.answer()

    session = get_session()
    try:
        user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
        if not user:
            await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        start_date = context.user_data.get('start_date')
        end_date = context.user_data.get('end_date')
        vacation_days = context.user_data.get('vacation_days')

        if not all([start_date, end_date, vacation_days]):
            await query.edit_message_text(
                "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç–ø—É—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_menu")
                ]])
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        vacation_request = VacationRequest(
            user_id=user.id,
            start_date=start_date,
            end_date=end_date,
            status='pending'
        )
        session.add(vacation_request)
        session.commit()
        logger.info(f"–°–æ–∑–¥–∞–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—É—Å–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name} (ID: {user.id})")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        success = await create_approval_request(vacation_request.id)
        if success:
            await send_approval_request(update, context, vacation_request.id)
            await query.edit_message_text(
                f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—É—Å–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ:\n\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {vacation_days}\n\n"
                f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_menu")
                ]])
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            session.delete(vacation_request)
            session.commit()
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—É—Å–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_menu")
                ]])
            )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data.clear()

    except Exception as e:
        logger.error(f"Error in confirm_vacation: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_menu")
            ]])
        )
    finally:
        session.close()

async def process_vacation_message(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–ø—É—Å–∫–∞"""
    user_data = context.user_data
    message_text = update.message.text
    
    if 'vacation_state' not in user_data:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞."
        )
        return
    
    state = user_data['vacation_state']
    
    if state == 'waiting_start_date':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞
        try:
            start_date = datetime.strptime(message_text, '%d.%m.%Y').date()
            today = datetime.now().date()
            
            if start_date < today:
                await update.message.reply_text(
                    "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:"
                )
                return
                
            user_data['start_date'] = start_date
            user_data['vacation_state'] = 'waiting_end_date'
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="restart_vacation_request")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞: {start_date.strftime('%d.%m.%Y')}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
                reply_markup=reply_markup
            )
        except ValueError:
            await update.message.reply_text(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
            )
    
    elif state == 'waiting_end_date':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞
        try:
            end_date = datetime.strptime(message_text, '%d.%m.%Y').date()
            start_date = user_data['start_date']
            
            if end_date < start_date:
                await update.message.reply_text(
                    "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:"
                )
                return
                
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞
            vacation_days = (end_date - start_date).days + 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞
            session = get_session()
            try:
                user = session.query(User).filter_by(telegram_id=update.message.from_user.id).first()
                if not user:
                    await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                    
                if vacation_days > user.vacation_days:
                    await update.message.reply_text(
                        f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞. –î–æ—Å—Ç—É–ø–Ω–æ: {int(user.vacation_days)}, –∑–∞–ø—Ä–æ—à–µ–Ω–æ: {vacation_days}.\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞:"
                    )
                    return
                    
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                user_data['end_date'] = end_date
                user_data['vacation_days'] = vacation_days
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_vacation")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="restart_vacation_request")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    f"üìÖ –ü–µ—Ä–∏–æ–¥ –æ—Ç–ø—É—Å–∫–∞: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n"
                    f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {vacation_days}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:",
                    reply_markup=reply_markup
                )
            finally:
                session.close()
        except ValueError:
            await update.message.reply_text(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
            )
    
    else:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—É—Å–∫–∞ –∑–∞–Ω–æ–≤–æ."
        )
        user_data.clear()
