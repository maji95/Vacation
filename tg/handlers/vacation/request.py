from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import get_session
from models import User
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def vacation_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–ø—É—Å–∫–∞"""
    query = update.callback_query
    await query.answer()

    session = get_session()
    try:
        user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
        if not user:
            await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        keyboard = [
            [InlineKeyboardButton("–ü–æ –¥–Ω—è–º", callback_data="vacation_by_days")],
            [InlineKeyboardButton("–ü–æ —á–∞—Å–∞–º", callback_data="vacation_by_hours")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="show_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üí° –£ –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ {user.vacation_days} –¥–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–ø—É—Å–∫–∞:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error in vacation_request: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    finally:
        session.close()

async def vacation_by_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—É—Å–∫–∞ –ø–æ –¥–Ω—è–º"""
    logger.info("Executing vacation_by_days function")
    query = update.callback_query
    await query.answer()

    keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="vacation_request")]]
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data['vacation_state'] = 'waiting_start_date'

async def vacation_by_hours(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—É—Å–∫–∞ –ø–æ —á–∞—Å–∞–º"""
    query = update.callback_query
    await query.answer()

    keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="vacation_request")]]
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data['vacation_state'] = 'waiting_hours'

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –æ—Ç–ø—É—Å–∫–∞
    await vacation_request(update, context)

async def restart_vacation_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–ø—É—Å–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∑–∞–ø—Ä–æ—Å—É –æ—Ç–ø—É—Å–∫–∞ –ø–æ –¥–Ω—è–º
    await vacation_by_days(update, context)

async def switch_to_hours(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—É—Å–∫ –ø–æ —á–∞—Å–∞–º"""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.clear()
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ—Ç–ø—É—Å–∫–∞ –ø–æ —á–∞—Å–∞–º
    await vacation_by_hours(update, context)
