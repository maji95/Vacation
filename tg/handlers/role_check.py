from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler
from config import get_session
from models import User, Role, Department, RegistrationQueue
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def check_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    user_id = update.message.from_user.id
    username = update.message.from_user.username or update.message.from_user.full_name
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")
    
    permissions = await get_user_permissions(user_id)
    
    if not permissions["exists"]:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        session = get_session()
        try:
            queue_user = session.query(RegistrationQueue).filter_by(telegram_id=user_id).first()
            if not queue_user:
                new_queue_user = RegistrationQueue(
                    telegram_id=user_id,
                    entered_name=update.message.from_user.full_name
                )
                session.add(new_queue_user)
                session.commit()
                logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            else:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            return
        finally:
            session.close()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    message = f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
    message += f"–†–æ–ª—å: {permissions['role'] or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'}\n"
    message += f"–û—Ç–¥–µ–ª: {permissions['department'] or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
    message += f"–î–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞: {permissions['vacation_days']}\n"
    message += f"–ê–¥–º–∏–Ω: {'–î–∞' if permissions['is_admin'] else '–ù–µ—Ç'}\n\n"
    message += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    keyboard = [
        [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—É—Å–∫–∞", callback_data="vacation_request")]
    ]

    if permissions["role"] in ["HR", "Department Head"]:
        keyboard.append([InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—É—Å–∫–∞–º–∏", callback_data="vacation_management")])
    
    if permissions["is_admin"]:
        keyboard.append([InlineKeyboardButton("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(message, reply_markup=reply_markup)

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    query = update.callback_query
    user_id = query.from_user.id
    username = query.from_user.username or query.from_user.full_name
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    await query.answer()
    permissions = await get_user_permissions(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    message = f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
    message += f"–†–æ–ª—å: {permissions['role'] or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'}\n"
    message += f"–û—Ç–¥–µ–ª: {permissions['department'] or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
    message += f"–î–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞: {permissions['vacation_days']}\n"
    message += f"–ê–¥–º–∏–Ω: {'–î–∞' if permissions['is_admin'] else '–ù–µ—Ç'}\n\n"
    message += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    keyboard = [
        [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—É—Å–∫–∞", callback_data="vacation_request")]
    ]

    if permissions["role"] in ["HR", "Department Head"]:
        keyboard.append([InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—É—Å–∫–∞–º–∏", callback_data="vacation_management")])
    
    if permissions["is_admin"]:
        keyboard.append([InlineKeyboardButton("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, reply_markup=reply_markup)

async def get_user_permissions(user_id: int) -> dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∞–≤–∞—Ö –¥–æ—Å—Ç—É–ø–∞"""
    session = get_session()
    try:
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user:
            return {
                "exists": False,
                "is_admin": False,
                "role": None,
                "department": None,
                "vacation_days": 0
            }
        
        role = session.query(Role).filter_by(id=user.role_id).first() if user.role_id else None
        department = session.query(Department).filter_by(id=user.department_id).first() if user.department_id else None
        
        if user.full_name:
            logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} (ID: {user_id}) –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        
        return {
            "exists": True,
            "is_admin": user.is_admin,
            "role": role.name if role else None,
            "department": department.name if department else None,
            "vacation_days": user.vacation_days,
            "user": user
        }
    finally:
        session.close()

def register(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è role_check"""
    application.add_handler(CommandHandler("start", check_role))
