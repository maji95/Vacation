from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import get_session
from models import User, VacationRequest
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def notify_hr_managers(vacation_request):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç HR-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ–± –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–º –æ—Ç–ø—É—Å–∫–µ"""
    session = get_session()
    try:
        hr_managers = session.query(User).filter_by(is_hr=True).all()
        employee = session.query(User).filter_by(id=vacation_request.user_id).first()
        
        message = (
            f"‚úÖ –ù–æ–≤—ã–π –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π –æ—Ç–ø—É—Å–∫\n"
            f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee.full_name}\n"
            f"–ü–µ—Ä–∏–æ–¥: {vacation_request.start_date.strftime('%d.%m.%Y')} - "
            f"{vacation_request.end_date.strftime('%d.%m.%Y')}"
        )
        
        for hr in hr_managers:
            try:
                await context.bot.send_message(
                    chat_id=hr.telegram_id,
                    text=message
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è HR {hr.full_name}: {e}")
    finally:
        session.close()

async def handle_vacation_approval(update: Update, context: ContextTypes.DEFAULT_TYPE, vacation_request_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—É—Å–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è"""
    session = get_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—É—Å–∫
        vacation_request = session.query(VacationRequest).filter_by(id=vacation_request_id).first()
        if not vacation_request:
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤
        directors = session.query(User).filter_by(is_director=True).all()
        employee = session.query(User).filter_by(id=vacation_request.user_id).first()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—É—Å–∫\n"
            f"–û—Ç: {employee.full_name}\n"
            f"–ü–µ—Ä–∏–æ–¥: {vacation_request.start_date.strftime('%d.%m.%Y')} - "
            f"{vacation_request.end_date.strftime('%d.%m.%Y')}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_vacation_{vacation_request_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_vacation_{vacation_request_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤—Å–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞–º
        for director in directors:
            try:
                await context.bot.send_message(
                    chat_id=director.telegram_id,
                    text=message,
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É {director.full_name}: {e}")
    finally:
        session.close()

async def approve_vacation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ callback_data
    vacation_request_id = int(query.data.split('_')[-1])
    
    session = get_session()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
        director = session.query(User).filter_by(telegram_id=query.from_user.id).first()
        if not director or not director.is_director:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
        vacation_request = session.query(VacationRequest).filter_by(id=vacation_request_id).first()
        if not vacation_request:
            await query.edit_message_text("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—É—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        if vacation_request.status != 'pending':
            await query.edit_message_text("–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        vacation_request.status = 'approved'
        session.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employee = session.query(User).filter_by(id=vacation_request.user_id).first()
        await context.bot.send_message(
            chat_id=employee.telegram_id,
            text=f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—É—Å–∫ —Å {vacation_request.start_date.strftime('%d.%m.%Y')} "
                 f"–ø–æ {vacation_request.end_date.strftime('%d.%m.%Y')} –æ–¥–æ–±—Ä–µ–Ω!"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º HR-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        hr_managers = session.query(User).filter_by(is_hr=True).all()
        for hr in hr_managers:
            try:
                await context.bot.send_message(
                    chat_id=hr.telegram_id,
                    text=f"üìã –û–¥–æ–±—Ä–µ–Ω –æ—Ç–ø—É—Å–∫:\n\n"
                         f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {vacation_request.user.full_name}\n"
                         f"–ü–µ—Ä–∏–æ–¥: {vacation_request.start_date.strftime('%d.%m.%Y')} - "
                         f"{vacation_request.end_date.strftime('%d.%m.%Y')}\n"
                         f"–û–¥–æ–±—Ä–∏–ª: {director.full_name}"
                )
            except Exception as e:
                logger.error(f"Error sending notification to HR {hr.telegram_id}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
        keyboard = [[InlineKeyboardButton("¬´ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_menu")]]
        await query.edit_message_text(
            f"‚úÖ –û—Ç–ø—É—Å–∫ –¥–ª—è {vacation_request.user.full_name} –æ–¥–æ–±—Ä–µ–Ω.\n"
            f"–ü–µ—Ä–∏–æ–¥: {vacation_request.start_date.strftime('%d.%m.%Y')} - {vacation_request.end_date.strftime('%d.%m.%Y')}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –æ—Ç–ø—É—Å–∫–∞: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    finally:
        session.close()

async def reject_vacation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ callback_data
    vacation_request_id = int(query.data.split('_')[-1])
    
    session = get_session()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
        director = session.query(User).filter_by(telegram_id=query.from_user.id).first()
        if not director or not director.is_director:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
        vacation_request = session.query(VacationRequest).filter_by(id=vacation_request_id).first()
        if not vacation_request:
            await query.edit_message_text("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—É—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        if vacation_request.status != 'pending':
            await query.edit_message_text("–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        vacation_request.status = 'rejected'
        session.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employee = session.query(User).filter_by(id=vacation_request.user_id).first()
        await context.bot.send_message(
            chat_id=employee.telegram_id,
            text=f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—É—Å–∫ —Å {vacation_request.start_date.strftime('%d.%m.%Y')} "
                 f"–ø–æ {vacation_request.end_date.strftime('%d.%m.%Y')} –æ—Ç–∫–ª–æ–Ω–µ–Ω."
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
        keyboard = [[InlineKeyboardButton("¬´ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_menu")]]
        await query.edit_message_text(
            f"‚ùå –û—Ç–ø—É—Å–∫ –¥–ª—è {vacation_request.user.full_name} –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n"
            f"–ü–µ—Ä–∏–æ–¥: {vacation_request.start_date.strftime('%d.%m.%Y')} - {vacation_request.end_date.strftime('%d.%m.%Y')}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—É—Å–∫–∞: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    finally:
        session.close()
