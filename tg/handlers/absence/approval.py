from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime
from config import get_session
from models import (
    User, HoursRequest, 
    ApprovalFirstHour, ApprovalSecondHour, ApprovalFinalHour, 
    ApprovalProcessHour, ApprovalDoneHour
)
import logging

logger = logging.getLogger(__name__)

async def create_absence_approval_request(hours_request_id: int) -> bool:
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ"""
    session = get_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        hours_request = session.query(HoursRequest).join(User).filter(
            HoursRequest.id == hours_request_id
        ).first()
        
        if not hours_request:
            logger.error(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ {hours_request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        approval_first = ApprovalFirstHour(
            id_hours=hours_request_id,
            name=hours_request.user.full_name,
            date=hours_request.date_absence,
            start_time=hours_request.start_hour,
            end_time=hours_request.end_hour,
            status='pending',
            created_at=datetime.utcnow()
        )
        
        approval_second = ApprovalSecondHour(
            id_hours=hours_request_id,
            name=hours_request.user.full_name,
            date=hours_request.date_absence,
            start_time=hours_request.start_hour,
            end_time=hours_request.end_hour,
            status='pending',
            created_at=datetime.utcnow()
        )
        
        approval_final = ApprovalFinalHour(
            id_hours=hours_request_id,
            name=hours_request.user.full_name,
            date=hours_request.date_absence,
            start_time=hours_request.start_hour,
            end_time=hours_request.end_hour,
            status='pending',
            created_at=datetime.utcnow()
        )
        
        approval_process = ApprovalProcessHour(
            id_hours=hours_request_id,
            original_name=hours_request.user.full_name,
            employee_name=hours_request.user.full_name,
            date=hours_request.date_absence,
            start_time=hours_request.start_hour,
            end_time=hours_request.end_hour,
            status='pending',
            created_at=datetime.utcnow()
        )

        session.add(approval_first)
        session.add(approval_second)
        session.add(approval_final)
        session.add(approval_process)
        session.commit()

        logger.info(f"–°–æ–∑–¥–∞–Ω—ã –∑–∞–ø–∏—Å–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è {hours_request_id}")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        session.rollback()
        return False
    finally:
        session.close()

async def send_absence_approval_request(update: Update, context: ContextTypes.DEFAULT_TYPE, hours_request_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–º—É –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
    session = get_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        approval = session.query(ApprovalFirstHour).filter_by(id_hours=hours_request_id).first()
        if not approval:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è {hours_request_id}")
            return

        # –ü–æ–ª—É—á–∞–µ–º —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ
        approver = session.query(User).filter_by(full_name=approval.name_approval).first()
        if not approver or not approver.telegram_id:
            logger.error(f"–£—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç telegram_id")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üìã –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç {approval.name}:\n\n"
            f"üìÖ –î–∞—Ç–∞: {approval.date.strftime('%d.%m.%Y')}\n"
            f"üïê –í—Ä–µ–º—è: {approval.start_time.strftime('%H:%M')} - {approval.end_time.strftime('%H:%M')}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_first_{hours_request_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_first_{hours_request_id}")
            ]
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–º—É
        await context.bot.send_message(
            chat_id=approver.telegram_id,
            text=message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è {hours_request_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {e}")
    finally:
        session.close()

async def handle_absence_approval(update: Update, context: ContextTypes.DEFAULT_TYPE, request_id: int, level: str, is_approved: bool):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ"""
    query = update.callback_query
    await query.answer()
    
    session = get_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ
        hours_request = session.query(HoursRequest).get(request_id)
        if not hours_request:
            await query.edit_message_text("–ó–∞–ø—Ä–æ—Å –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employee = session.query(User).get(hours_request.user_id)
        if not employee:
            await query.edit_message_text("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        approval_process = session.query(ApprovalProcessHour).filter_by(
            employee_name=employee.full_name
        ).first()
        
        if not approval_process:
            await query.edit_message_text("–ü—Ä–æ—Ü–µ—Å—Å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        if level == 'first':
            current_table = ApprovalFirstHour
            next_approver_name = approval_process.second_approval if approval_process.second_approval else approval_process.final_approval
        elif level == 'second':
            current_table = ApprovalSecondHour
            next_approver_name = approval_process.final_approval
        else:  # final
            current_table = ApprovalFinalHour
            next_approver_name = None

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        approval = current_table(
            name=employee.full_name,
            name_approval=update.effective_user.full_name,
            status='approved' if is_approved else 'rejected',
            date=datetime.utcnow(),
            date_absence=hours_request.date_absence,
            start_hour=hours_request.start_hour,
            end_hour=hours_request.end_hour
        )
        session.add(approval)

        if is_approved:
            if next_approver_name:
                # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ
                next_approver = session.query(User).filter_by(full_name=next_approver_name).first()
                if next_approver and next_approver.telegram_id:
                    keyboard = [
                        [
                            InlineKeyboardButton(
                                "‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å", 
                                callback_data=f"approve_absence_{level.replace('first', 'second').replace('second', 'final')}_{request_id}"
                            ),
                            InlineKeyboardButton(
                                "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                                callback_data=f"reject_absence_{level.replace('first', 'second').replace('second', 'final')}_{request_id}"
                            )
                        ]
                    ]
                    await context.bot.send_message(
                        chat_id=next_approver.telegram_id,
                        text=(
                            f"üìã –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç {employee.full_name}:\n\n"
                            f"üìÖ –î–∞—Ç–∞: {hours_request.date_absence.strftime('%d.%m.%Y')}\n"
                            f"üïê –í—Ä–µ–º—è: {hours_request.start_hour.strftime('%H:%M')} - "
                            f"{hours_request.end_hour.strftime('%H:%M')}"
                        ),
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
            else:
                # –§–∏–Ω–∞–ª—å–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                hours_request.status = 'approved'
                hours_request.updated_at = datetime.utcnow()
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ ApprovalDoneHour
                done_approval = ApprovalDoneHour(
                    name=employee.full_name,
                    name_approval=update.effective_user.full_name,
                    status='approved',
                    date=datetime.utcnow(),
                    date_absence=hours_request.date_absence,
                    start_hour=hours_request.start_hour,
                    end_hour=hours_request.end_hour
                )
                session.add(done_approval)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if employee.telegram_id:
                    await context.bot.send_message(
                        chat_id=employee.telegram_id,
                        text=(
                            "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω:\n\n"
                            f"üìÖ –î–∞—Ç–∞: {hours_request.date_absence.strftime('%d.%m.%Y')}\n"
                            f"üïê –í—Ä–µ–º—è: {hours_request.start_hour.strftime('%H:%M')} - "
                            f"{hours_request.end_hour.strftime('%H:%M')}"
                        )
                    )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ HR
                hr_user = session.query(User).filter_by(role='hr').first()
                if hr_user and hr_user.telegram_id:
                    await context.bot.send_message(
                        chat_id=hr_user.telegram_id,
                        text=(
                            f"‚ÑπÔ∏è –ù–æ–≤—ã–π —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç {employee.full_name}:\n\n"
                            f"üìÖ –î–∞—Ç–∞: {hours_request.date_absence.strftime('%d.%m.%Y')}\n"
                            f"üïê –í—Ä–µ–º—è: {hours_request.start_hour.strftime('%H:%M')} - "
                            f"{hours_request.end_hour.strftime('%H:%M')}"
                        )
                    )
        else:
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω
            hours_request.status = 'rejected'
            hours_request.updated_at = datetime.utcnow()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if employee.telegram_id:
                await context.bot.send_message(
                    chat_id=employee.telegram_id,
                    text=(
                        "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω:\n\n"
                        f"üìÖ –î–∞—Ç–∞: {hours_request.date_absence.strftime('%d.%m.%Y')}\n"
                        f"üïê –í—Ä–µ–º—è: {hours_request.start_hour.strftime('%H:%M')} - "
                        f"{hours_request.end_hour.strftime('%H:%M')}"
                    )
                )

        session.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ
        await query.edit_message_text(
            f"{'‚úÖ –í—ã —É—Ç–≤–µ—Ä–¥–∏–ª–∏' if is_approved else '‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏'} –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ:\n\n"
            f"üìÖ –î–∞—Ç–∞: {hours_request.date_absence.strftime('%d.%m.%Y')}\n"
            f"üïê –í—Ä–µ–º—è: {hours_request.start_hour.strftime('%H:%M')} - {hours_request.end_hour.strftime('%H:%M')}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        session.rollback()
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    finally:
        session.close()
