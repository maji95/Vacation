from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config import get_session
from models import User, Department
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def manage_team(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π"""
    logger.info("Executing manage_team function")
    query = update.callback_query
    await query.answer()

    session = get_session()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –æ—Ç–¥–µ–ª–∞
        head = session.query(User).filter_by(telegram_id=query.from_user.id).first()
        if not head or head.role.name != "–ù–∞—á–∞–ª—å–Ω–∏–∫ –æ—Ç–¥–µ–ª–∞":
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –æ—Ç–¥–µ–ª–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Ç–¥–µ–ª–∞
        team_members = session.query(User).filter_by(department_id=head.department_id).all()
        
        message = f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ—Ç–¥–µ–ª–∞ {head.department.name}:\n\n"
        for member in team_members:
            if member.id != head.id:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞
                message += f"üë§ {member.full_name}\n"
                message += f"   –î–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞: {member.vacation_days}\n\n"

        keyboard = [
            [InlineKeyboardButton("–ì—Ä–∞—Ñ–∏–∫ –æ—Ç–ø—É—Å–∫–æ–≤", callback_data="team_schedule")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="department_head_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(message, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"Error in manage_team: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π.")
    finally:
        session.close()
        logger.info("manage_team function completed")

async def view_team_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –æ—Ç–ø—É—Å–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
    logger.info("Executing view_team_schedule function")
    query = update.callback_query
    await query.answer()

    session = get_session()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –æ—Ç–¥–µ–ª–∞
        head = session.query(User).filter_by(telegram_id=query.from_user.id).first()
        if not head or head.role.name != "–ù–∞—á–∞–ª—å–Ω–∏–∫ –æ—Ç–¥–µ–ª–∞":
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –æ—Ç–¥–µ–ª–∞.")
            return

        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Ç–ø—É—Å–∫–æ–≤
        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="manage_team")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Ç–ø—É—Å–∫–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"Error in view_team_schedule: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Ç–ø—É—Å–∫–æ–≤.")
    finally:
        session.close()
        logger.info("view_team_schedule function completed")
